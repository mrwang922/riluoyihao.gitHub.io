<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wdl&#39;s blog</title>
    <link>https://riluoyihao.github.io/</link>
    <description>Recent content on wdl&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You</copyright>
    <lastBuildDate>Thu, 05 Aug 2021 14:52:10 +0800</lastBuildDate><atom:link href="https://riluoyihao.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ConcurrentHashMap1.8</title>
      <link>https://riluoyihao.github.io/post/concurrenthashmap1.8/</link>
      <pubDate>Thu, 05 Aug 2021 14:52:10 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/concurrenthashmap1.8/</guid>
      <description>ConcurrentHashMap 1.8 1. 前言 跟1.7比较的话，变化还是很大的。取消了分段锁。
1.1 concurrentHashMap是如何保证并发安全的？ 主要是利用Unsafe操作 + synchronized关键字的。 Unsafe操作和1.7的类似，主要负责并发安全得修改对象的属性和数组中某个位置的值。 synchronized主要负责在需要操作某个位置时加锁（该位置不能为空），比如向某个位置的链表的头结点加锁，或者是给某个位置的树（TreeBin）加锁。 1.8 中仍然有分段锁的思想，只是1.7中段数是可控的。而1.8中是数组的每个位置都会加锁。
2. 初始化方法 默认初始化方法非常简单，就是一个空参构造器。
1public ConcurrentHashMap() { 2} 3.put方法 1public V put(K key, V value) { 2 return putVal(key, value, false); 3} 4 5final V putVal(K key, V value, boolean onlyIfAbsent) { 6 if (key == null || value == null) throw new NullPointerException(); 7 // 还是获取hash值。 8 int hash = spread(key.hashCode()); 9 int binCount = 0; 10 for (Node&amp;lt;K,V&amp;gt;[] tab = table;;) { 11 Node&amp;lt;K,V&amp;gt; f; int n, i, fh; 12 if (tab == null || (n = tab.</description>
    </item>
    
    <item>
      <title>ConcurrentHashMap1.7</title>
      <link>https://riluoyihao.github.io/post/concurrenthashmap1.7/</link>
      <pubDate>Thu, 05 Aug 2021 14:25:24 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/concurrenthashmap1.7/</guid>
      <description>ConcurrentHashMap 1.7 1.前言 concurrentHashMap是线程安全的。那么它如何实现了线程安全呢。这里主要依赖两方面：
 在关键部分使用了unsafe。可以查看[「UNSAFE」](https://shimo.im/docs/9KXdpcPRCPcxDTTc/ 「UNSAFE」) 使用了分段锁。  1.1 如何保证并发安全的 主要利用Unsafe操作 + ReentrantLock + 分段思想。 其中设计就到的Unsafe的操作主要有:
 compareAndSwapObject 通过cas的方式修改对象的属性。 putOrderedObject 并发安全得给数组的某个位置赋值。 getObjectVolatile 并发安全得获取数组某个位置的值。  分段思想是为了提高ConcurretHahsMap的并发量，分段数越高则支持的最大并发量越高，开发人员可以通过指定concurrentLevel参数来指定并发量。concurrentHashMap中的segment就是用来表示一个段的。 每个segment可以看作一个小型的hashMap，当调用concurrentHashMap的put方法时，最终会调用segment的put方法，而segment继承了ReentrantLock，所以segment自带可重入锁，当调用segment的put方法时，会先利用可重入锁加锁，加锁成功后再将待插入的k-v值插入到segment对应的table数组的具体位置，插入完成后解锁。
1.2 先简单说下分段锁 concurrentHashMap的结构比照HashMap，可以看作多了一层。 最外一层的数组是ss（segment数组），每个segment对象又对应一个HashEntry数组。 可以简单看作下图，后续会详细分析。
2.初始化方法 1public ConcurrentHashMap() { 2 this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL); 3} 4 5public ConcurrentHashMap(int initialCapacity) { 6 this(initialCapacity, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL); 7} 8 9public ConcurrentHashMap(int initialCapacity, float loadFactor) { 10 this(initialCapacity, loadFactor, DEFAULT_CONCURRENCY_LEVEL); 11} 12 13public ConcurrentHashMap(Map&amp;lt;? extends K, ? extends V&amp;gt; m) { 14 this(Math.</description>
    </item>
    
    <item>
      <title>HashMap1.8</title>
      <link>https://riluoyihao.github.io/post/hashmap1.8/</link>
      <pubDate>Thu, 05 Aug 2021 11:37:07 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/hashmap1.8/</guid>
      <description>HashMap 1.8 1. 与1.7的区别 hashMap1.8与1.7的区别主要有两点：
 由链表变成了链表加红黑树。 链表插入节点时，由头插法变成了尾插法。  原因是反正需要遍历整个链表是不是需要树化，所以直接用尾插法。    2. put方法 由于我们之前「HashMap1.7」已经详细说明了1.7的源码，而1.8与1.7又有很多相似之处，所以我们这里就不做太详细的分析，主要对不同之处做下详细分析。 PS:这里需要说明下，因为1.8用到了红黑树，所以可以先看下《红黑树》
1. put方法 1public V put(K key, V value) { 2 // 这里我们先直接看hash方法。 3 return putVal(hash(key), key, value, false, true); 4} 5 6static final int hash(Object key) { 7 int h; 8 // 这里其实有一个细节：key不能为空，因为为空的时候就会报错了（key.hashCode()）。 9 // 而我们应该知道，在1.7里key是可以为null的。 10 return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16); 11} 这里的hash方法其实比1.7的就简单多了，原因就是1.7中因为只有链表，所以为了提高查询的效率，必须尽量减少hash碰撞，所以做了很多位移等相关操作。而1.8之所以不用做这么的复杂处理是因为数据结构多了红黑树，本身查询效率就大大增加了，所以就不用耗费更多的CPU的资源来获取key的hash值了。</description>
    </item>
    
    <item>
      <title>HashMap1.7</title>
      <link>https://riluoyihao.github.io/post/hashmap1.7/</link>
      <pubDate>Sun, 01 Aug 2021 20:02:31 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/hashmap1.7/</guid>
      <description>HashMap 1.7 1. 初始化 1.1 主要是几个属性： 1static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // 默认的初始化容量，值为 2^4 也就是16 2static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; // 最大容量 2^30 也就是1073741824 3static final float DEFAULT_LOAD_FACTOR = 0.75f; // 默认负载因子 4static final Entry&amp;lt;?,?&amp;gt;[] EMPTY_TABLE = {}; // 空的entry数组 5transient Entry&amp;lt;K,V&amp;gt;[] table = (Entry&amp;lt;K,V&amp;gt;[]) EMPTY_TABLE; // 扩容需要的entry数组，长度必须是2的整数次幂，原因会在后面讲 6transient int size; // map中所有的键值对数量，注意不是entry数组的元素个数 7transient int modCount; // 修改次数，后续会详细说 8static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE; // 大意是说是一个默认的阈值，当一个键值对的键是String类型时，且map的容量达到了这个阈值，就启用备用哈希（alternative hashing）。备用哈希可以减少String类型的key计算哈希码（更容易）发生哈希碰撞的发生率。该值可以通过定义系统属性jdk.</description>
    </item>
    
    <item>
      <title>红黑树</title>
      <link>https://riluoyihao.github.io/post/%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <pubDate>Wed, 14 Jul 2021 22:34:51 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <description>红黑树 红黑树的特性  每个节点，要么是红色，要么是黑色。 根节点是黑色。 每个叶子节(NIL)点是黑色。 每个红色节点的两个子节点一定是黑色。 不能有两个红色节点相连。任意一节点到每个叶子节点的路径都包含数量相同的黑色节点。也就是黑高。  由此可以推出：如果一个节点存在黑子节点，那么该节点一定有两个子节点。    红黑树的自平衡 红黑树的自平衡依赖三种操作：变色、左旋、右旋。
 变色：节点的颜色由黑变红或者由红变黑。 左旋：以某个节点作为支点（旋转节点），其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变。 右旋：以某个节点作为支点（旋转节点），其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变。  左旋图示
右旋图示
红黑树的查找： 红黑树本身就是平衡二叉树的一种，与二叉搜索树的查找是一模一样的。
红黑树的插入： 插入操作包括两部分工作：
 查找插入的位置。 插入后自平衡。  注意：插入节点，必须为红色。理由很简单：红色在父节点（如果存在）为黑色节点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。
但如果插入节点为黑色，那么插入位置所在的子树黑色节点总是多1，必须做自平衡。
红黑树插入节点情景分析  红黑树为空树  最简单的一种情景，直接把插入节点作为根节点就行。
根据红黑树性质2：根节点必须为黑色。还需要把插入节点改为黑色。
 插入节点的key已经存在  更新当前节点的值为插入节点的值。
 插入节点的父节点为黑色节点  由于插入的节点的颜色是红色的，当插入节点的父节点为黑色时，并不会影响红黑树的平衡，直接插入即可，无需做自平衡。
 插入节点的父节点为红色  再次回想下红黑树的性质2：根节点是黑色。如果插入节点的父节点为红色，那么该父节点一定不是根节点，所以插入节点总是存在祖父节点。
这一点很关键，因为后续的旋转操作肯定需要祖父节点的参与。
我们这里约定下，把当前节点称为 I 节点。把其父节点称为P节点。把其叔叔节点称为U节点。把其祖父节点称为PP节点。
   叔叔节点存在并且为红节点    依据红黑树性质4可知：红色节点不能相连 ==&amp;gt; 祖父节点一定为黑色节点。
因为不可以同时存在两个相连的红节点，那么此时该插入子树的红黑层数的情况就是：黑红红。
显然最简单的处理方式是把其改为：红黑红。
所以处理方式是：
  将P和U节点改为黑色。</description>
    </item>
    
    <item>
      <title>Integer源码分析</title>
      <link>https://riluoyihao.github.io/post/integer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 13 Jul 2021 10:52:52 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/integer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>Integer源码分析 主要方法 highestOneBit(int i) 1public static int highestOneBit(int i) { 2 // HD, Figure 3-1 3 i |= (i &amp;gt;&amp;gt; 1); 4 i |= (i &amp;gt;&amp;gt; 2); 5 i |= (i &amp;gt;&amp;gt; 4); 6 i |= (i &amp;gt;&amp;gt; 8); 7 i |= (i &amp;gt;&amp;gt; 16); 8 return i - (i &amp;gt;&amp;gt;&amp;gt; 1); 9}   2的n次幂的特点
首先我们需要知道一个前提，就是2的n次幂有什么特点，我们可以看下规律
i:2--------binaryResult: 10 i:4--------binaryResult: 100 i:8--------binaryResult: 1000 i:16--------binaryResult: 10 000 i:32--------binaryResult: 10 0000 i:64--------binaryResult: 100 0000 i:128--------binaryResult: 1000 0000 i:256--------binaryResult: 1 0000 0000 i:512--------binaryResult: 10 0000 0000 i:1024--------binaryResult: 100 0000 0000 从中我们可以看到，2的n次幂的二进制表示形式就是只有一位为1，其余位均为0。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://riluoyihao.github.io/post/my-first-post/</link>
      <pubDate>Mon, 12 Jul 2021 12:38:58 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/my-first-post/</guid>
      <description>第一篇测试 标题   第一条
  第二条
以下是图片
  </description>
    </item>
    
  </channel>
</rss>
