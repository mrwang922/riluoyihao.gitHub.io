<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wdl&#39;s blog</title>
    <link>https://riluoyihao.github.io/post/</link>
    <description>Recent content in Posts on wdl&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>You</copyright>
    <lastBuildDate>Sun, 01 Aug 2021 20:02:31 +0800</lastBuildDate><atom:link href="https://riluoyihao.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HashMap1</title>
      <link>https://riluoyihao.github.io/post/hashmap1.7/</link>
      <pubDate>Sun, 01 Aug 2021 20:02:31 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/hashmap1.7/</guid>
      <description>HashMap 1.7 1. 初始化 1.1 主要是几个属性： 1static final int DEFAULT_INITIAL_CAPACITY = 1 &amp;lt;&amp;lt; 4; // 默认的初始化容量，值为 2^4 也就是16 2static final int MAXIMUM_CAPACITY = 1 &amp;lt;&amp;lt; 30; // 最大容量 2^30 也就是1073741824 3static final float DEFAULT_LOAD_FACTOR = 0.75f; // 默认负载因子 4static final Entry&amp;lt;?,?&amp;gt;[] EMPTY_TABLE = {}; // 空的entry数组 5transient Entry&amp;lt;K,V&amp;gt;[] table = (Entry&amp;lt;K,V&amp;gt;[]) EMPTY_TABLE; // 扩容需要的entry数组，长度必须是2的整数次幂，原因会在后面讲 6transient int size; // map中所有的键值对数量，注意不是entry数组的元素个数 7transient int modCount; // 修改次数，后续会详细说 8static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE; // 大意是说是一个默认的阈值，当一个键值对的键是String类型时，且map的容量达到了这个阈值，就启用备用哈希（alternative hashing）。备用哈希可以减少String类型的key计算哈希码（更容易）发生哈希碰撞的发生率。该值可以通过定义系统属性jdk.</description>
    </item>
    
    <item>
      <title>红黑树</title>
      <link>https://riluoyihao.github.io/post/%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <pubDate>Wed, 14 Jul 2021 22:34:51 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <description>红黑树 红黑树的特性  每个节点，要么是红色，要么是黑色。 根节点是黑色。 每个叶子节(NIL)点是黑色。 每个红色节点的两个子节点一定是黑色。 不能有两个红色节点相连。任意一节点到每个叶子节点的路径都包含数量相同的黑色节点。也就是黑高。  由此可以推出：如果一个节点存在黑子节点，那么该节点一定有两个子节点。    红黑树的自平衡 红黑树的自平衡依赖三种操作：变色、左旋、右旋。
 变色：节点的颜色由黑变红或者由红变黑。 左旋：以某个节点作为支点（旋转节点），其右子节点变为旋转节点的父节点，右子节点的左子节点变为旋转节点的右子节点，左子节点保持不变。 右旋：以某个节点作为支点（旋转节点），其左子节点变为旋转节点的父节点，左子节点的右子节点变为旋转节点的左子节点，右子节点保持不变。  左旋图示
右旋图示
红黑树的查找： 红黑树本身就是平衡二叉树的一种，与二叉搜索树的查找是一模一样的。
红黑树的插入： 插入操作包括两部分工作：
 查找插入的位置。 插入后自平衡。  注意：插入节点，必须为红色。理由很简单：红色在父节点（如果存在）为黑色节点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。
但如果插入节点为黑色，那么插入位置所在的子树黑色节点总是多1，必须做自平衡。
红黑树插入节点情景分析  红黑树为空树  最简单的一种情景，直接把插入节点作为根节点就行。
根据红黑树性质2：根节点必须为黑色。还需要把插入节点改为黑色。
 插入节点的key已经存在  更新当前节点的值为插入节点的值。
 插入节点的父节点为黑色节点  由于插入的节点的颜色是红色的，当插入节点的父节点为黑色时，并不会影响红黑树的平衡，直接插入即可，无需做自平衡。
 插入节点的父节点为红色  再次回想下红黑树的性质2：根节点是黑色。如果插入节点的父节点为红色，那么该父节点一定不是根节点，所以插入节点总是存在祖父节点。
这一点很关键，因为后续的旋转操作肯定需要祖父节点的参与。
我们这里约定下，把当前节点称为 I 节点。把其父节点称为P节点。把其叔叔节点称为U节点。把其祖父节点称为PP节点。
   叔叔节点存在并且为红节点    依据红黑树性质4可知：红色节点不能相连 ==&amp;gt; 祖父节点一定为黑色节点。
因为不可以同时存在两个相连的红节点，那么此时该插入子树的红黑层数的情况就是：黑红红。
显然最简单的处理方式是把其改为：红黑红。
所以处理方式是：
  将P和U节点改为黑色。</description>
    </item>
    
    <item>
      <title>Integer源码分析</title>
      <link>https://riluoyihao.github.io/post/integer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 13 Jul 2021 10:52:52 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/integer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>Integer源码分析 主要方法 highestOneBit(int i) 1public static int highestOneBit(int i) { 2 // HD, Figure 3-1 3 i |= (i &amp;gt;&amp;gt; 1); 4 i |= (i &amp;gt;&amp;gt; 2); 5 i |= (i &amp;gt;&amp;gt; 4); 6 i |= (i &amp;gt;&amp;gt; 8); 7 i |= (i &amp;gt;&amp;gt; 16); 8 return i - (i &amp;gt;&amp;gt;&amp;gt; 1); 9}   2的n次幂的特点
首先我们需要知道一个前提，就是2的n次幂有什么特点，我们可以看下规律
i:2--------binaryResult: 10 i:4--------binaryResult: 100 i:8--------binaryResult: 1000 i:16--------binaryResult: 10 000 i:32--------binaryResult: 10 0000 i:64--------binaryResult: 100 0000 i:128--------binaryResult: 1000 0000 i:256--------binaryResult: 1 0000 0000 i:512--------binaryResult: 10 0000 0000 i:1024--------binaryResult: 100 0000 0000 从中我们可以看到，2的n次幂的二进制表示形式就是只有一位为1，其余位均为0。</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://riluoyihao.github.io/post/my-first-post/</link>
      <pubDate>Mon, 12 Jul 2021 12:38:58 +0800</pubDate>
      
      <guid>https://riluoyihao.github.io/post/my-first-post/</guid>
      <description>第一篇测试 标题   第一条
  第二条
以下是图片
  </description>
    </item>
    
  </channel>
</rss>
